// Generated by github.com/hypermusk/hypermusk
// DO NOT EDIT


#import "todoapi.h"

static Todoapi * _todoapi;
static NSDateFormatter * _dateFormatter;

@implementation Todoapi : NSObject
+ (Todoapi *) get {
	if(!_todoapi) {
		_todoapi = [[Todoapi alloc] init];
	}
	return _todoapi;
}

+ (NSDateFormatter *) dateFormatter {
	if(!_dateFormatter) {
		_dateFormatter = [[NSDateFormatter alloc] init];
		[_dateFormatter setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZZZZ"];
	}
	return _dateFormatter;
}

+ (NSDate *) dateFromString:(NSString *)dateString {
	if(!dateString) {
		return nil;
	}

	NSError *error;
	NSRegularExpression *regexp = [NSRegularExpression regularExpressionWithPattern:@"\\.[0-9]*" options:0 error:&error];
	NSAssert(!error, @"Error in regexp");

	NSRange range = NSMakeRange(0, [dateString length]);
	dateString = [regexp stringByReplacingMatchesInString:dateString options:0 range:range withTemplate:@""];

	NSDate *date;
	[[Todoapi dateFormatter] getObjectValue:&date forString:dateString range:nil error:&error];
	if(error) {
		if ([[Todoapi get] Verbose]) NSLog(@"Error formatting date %@: %@ (%@)", dateString, [error localizedDescription], error);
		return nil;
	}
	return date;
}

+ (NSString *) stringFromDate:(NSDate *) date {
	if(!date) {
		return nil;
	}
	NSString * dateString = [[Todoapi dateFormatter] stringFromDate:date];
	dateString = [[[dateString substringToIndex:(dateString.length - 3)] stringByAppendingString:@":"] stringByAppendingString:[dateString substringFromIndex:(dateString.length - 2)]];
	return dateString;
}

+ (NSDictionary *) request:(NSURL*)url req:(NSDictionary *)req error:(NSError **)error {
	NSMutableURLRequest *httpRequest = [NSMutableURLRequest requestWithURL:url];
	[httpRequest setHTTPMethod:@"POST"];
	[httpRequest setValue:@"application/json;charset=utf-8" forHTTPHeaderField:@"Content-Type"];
	Todoapi * _api = [Todoapi get];
	NSData *requestBody = [NSJSONSerialization dataWithJSONObject:req options:NSJSONWritingPrettyPrinted error:error];
	if([_api Verbose]) {
		NSLog(@"Request: %@", [NSString stringWithUTF8String:[requestBody bytes]]);
	}
	[httpRequest setHTTPBody:requestBody];
	if(*error != nil) {
		return nil;
	}
	NSURLResponse  *response = nil;
	NSData *returnData = [NSURLConnection sendSynchronousRequest:httpRequest returningResponse:&response error:error];
	if(*error != nil || returnData == nil) {
		return nil;
	}
	if([_api Verbose]) {
		NSLog(@"Response: %@", [NSString stringWithUTF8String:[returnData bytes]]);
	}
	return [NSJSONSerialization JSONObjectWithData:returnData options:NSJSONReadingAllowFragments error:error];
}

+ (NSError *)errorWithDictionary:(NSDictionary *)dict {
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return nil;
	}
	if ([[dict allKeys] count] == 0) {
		return nil;
	}
	NSMutableDictionary *userInfo = [NSMutableDictionary alloc];
	id reason = [dict valueForKey:@"Reason"];
	if ([reason isKindOfClass:[NSDictionary class]]) {
		userInfo = [userInfo initWithDictionary:reason];
	} else {
		userInfo = [userInfo init];
	}
	[userInfo setObject:[dict valueForKey:@"Message"] forKey:NSLocalizedDescriptionKey];

	NSString *code = [dict valueForKey:@"Code"];
	NSNumberFormatter *f = [[NSNumberFormatter alloc] init];
	[f setNumberStyle:NSNumberFormatterDecimalStyle];
	NSNumber *codeNumber = [f numberFromString:code];
	NSInteger intCode = -1;
	if (codeNumber != nil) {
		intCode = [codeNumber integerValue];
	}
	NSError *err = [NSError errorWithDomain:@"TodoapiError" code:intCode userInfo:userInfo];
	return err;
}

@end


// --- TodoList ---
@implementation TodoList

@synthesize Id;
@synthesize Name;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setName:[dict valueForKey:@"Name"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.Name forKey:@"Name"];

	return dict;
}

@end

// --- TodoItem ---
@implementation TodoItem

@synthesize Id;
@synthesize ListId;
@synthesize Content;
@synthesize Done;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setId:[dict valueForKey:@"Id"]];
	[self setListId:[dict valueForKey:@"ListId"]];
	[self setContent:[dict valueForKey:@"Content"]];
	[self setDone:[[dict valueForKey:@"Done"] boolValue]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Id forKey:@"Id"];
	[dict setValue:self.ListId forKey:@"ListId"];
	[dict setValue:self.Content forKey:@"Content"];
	[dict setValue:[NSNumber numberWithBool:self.Done] forKey:@"Done"];

	return dict;
}

@end


// === Interfaces ===



// --- GetTodoListsParams ---
@implementation UserServiceGetTodoListsParams : NSObject


- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	return dict;
}

@end

// --- GetTodoListsResults ---
@implementation UserServiceGetTodoListsResults : NSObject

@synthesize List;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mList = [[NSMutableArray alloc] init];
	NSArray * lList = [dict valueForKey:@"List"];
	if ([lList isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lList) {
			[mList addObject: [[TodoList alloc] initWithDictionary:d]];
		}
		[self setList:mList];
	}
	[self setErr:[Todoapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mList = [[NSMutableArray alloc] init];
	for (TodoList * p in List) {
		[mList addObject:[p dictionary]];
	}
	[dict setValue:mList forKey:@"List"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- GetTodoItemsParams ---
@implementation UserServiceGetTodoItemsParams : NSObject

@synthesize ListId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setListId:[dict valueForKey:@"ListId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ListId forKey:@"ListId"];

	return dict;
}

@end

// --- GetTodoItemsResults ---
@implementation UserServiceGetTodoItemsResults : NSObject

@synthesize List;
@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}

	NSMutableArray * mList = [[NSMutableArray alloc] init];
	NSArray * lList = [dict valueForKey:@"List"];
	if ([lList isKindOfClass:[NSArray class]]) {
		for (NSDictionary * d in lList) {
			[mList addObject: [[TodoItem alloc] initWithDictionary:d]];
		}
		[self setList:mList];
	}
	[self setErr:[Todoapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];

	NSMutableArray * mList = [[NSMutableArray alloc] init];
	for (TodoItem * p in List) {
		[mList addObject:[p dictionary]];
	}
	[dict setValue:mList forKey:@"List"];
	
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- PutTodoListParams ---
@implementation UserServicePutTodoListParams : NSObject

@synthesize Name;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setName:[dict valueForKey:@"Name"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Name forKey:@"Name"];

	return dict;
}

@end

// --- PutTodoListResults ---
@implementation UserServicePutTodoListResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Todoapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- CreateTodoParams ---
@implementation UserServiceCreateTodoParams : NSObject

@synthesize ListId;
@synthesize Content;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setListId:[dict valueForKey:@"ListId"]];
	[self setContent:[dict valueForKey:@"Content"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.ListId forKey:@"ListId"];
	[dict setValue:self.Content forKey:@"Content"];

	return dict;
}

@end

// --- CreateTodoResults ---
@implementation UserServiceCreateTodoResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Todoapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- DoneTodoParams ---
@implementation UserServiceDoneTodoParams : NSObject

@synthesize TodoItemId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTodoItemId:[dict valueForKey:@"TodoItemId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.TodoItemId forKey:@"TodoItemId"];

	return dict;
}

@end

// --- DoneTodoResults ---
@implementation UserServiceDoneTodoResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Todoapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end

// --- UndoneTodoParams ---
@implementation UserServiceUndoneTodoParams : NSObject

@synthesize TodoItemId;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setTodoItemId:[dict valueForKey:@"TodoItemId"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.TodoItemId forKey:@"TodoItemId"];

	return dict;
}

@end

// --- UndoneTodoResults ---
@implementation UserServiceUndoneTodoResults : NSObject

@synthesize Err;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setErr:[Todoapi errorWithDictionary:[dict valueForKey:@"Err"]]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Err forKey:@"Err"];

	return dict;
}

@end




@implementation UserService : NSObject


@synthesize Email;
@synthesize Password;

- (id) initWithDictionary:(NSDictionary*)dict{
	self = [super init];
	if (!self) {
		return self;
	}
	if (![dict isKindOfClass:[NSDictionary class]]) {
		return self;
	}
	[self setEmail:[dict valueForKey:@"Email"]];
	[self setPassword:[dict valueForKey:@"Password"]];

	return self;
}

- (NSDictionary*) dictionary {
	NSMutableDictionary * dict = [[NSMutableDictionary alloc] init];
	[dict setValue:self.Email forKey:@"Email"];
	[dict setValue:self.Password forKey:@"Password"];

	return dict;
}



// --- GetTodoLists ---
- (UserServiceGetTodoListsResults *) GetTodoLists {
	
	UserServiceGetTodoListsResults *results = [UserServiceGetTodoListsResults alloc];
	UserServiceGetTodoListsParams *params = [[UserServiceGetTodoListsParams alloc] init];
	
	Todoapi * _api = [Todoapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/UserService/GetTodoLists.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Todoapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- GetTodoItems ---
- (UserServiceGetTodoItemsResults *) GetTodoItems:(NSString *)listId {
	
	UserServiceGetTodoItemsResults *results = [UserServiceGetTodoItemsResults alloc];
	UserServiceGetTodoItemsParams *params = [[UserServiceGetTodoItemsParams alloc] init];
	[params setListId:listId];
	
	Todoapi * _api = [Todoapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/UserService/GetTodoItems.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Todoapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results;
	}
	results = [results initWithDictionary: dict];
	
	return results;
}

// --- PutTodoList ---
- (NSError *) PutTodoList:(NSString *)name {
	
	UserServicePutTodoListResults *results = [UserServicePutTodoListResults alloc];
	UserServicePutTodoListParams *params = [[UserServicePutTodoListParams alloc] init];
	[params setName:name];
	
	Todoapi * _api = [Todoapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/UserService/PutTodoList.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Todoapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- CreateTodo ---
- (NSError *) CreateTodo:(NSString *)listId content:(NSString *)content {
	
	UserServiceCreateTodoResults *results = [UserServiceCreateTodoResults alloc];
	UserServiceCreateTodoParams *params = [[UserServiceCreateTodoParams alloc] init];
	[params setListId:listId];
	[params setContent:content];
	
	Todoapi * _api = [Todoapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/UserService/CreateTodo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Todoapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- DoneTodo ---
- (NSError *) DoneTodo:(NSString *)todoItemId {
	
	UserServiceDoneTodoResults *results = [UserServiceDoneTodoResults alloc];
	UserServiceDoneTodoParams *params = [[UserServiceDoneTodoParams alloc] init];
	[params setTodoItemId:todoItemId];
	
	Todoapi * _api = [Todoapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/UserService/DoneTodo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Todoapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}

// --- UndoneTodo ---
- (NSError *) UndoneTodo:(NSString *)todoItemId {
	
	UserServiceUndoneTodoResults *results = [UserServiceUndoneTodoResults alloc];
	UserServiceUndoneTodoParams *params = [[UserServiceUndoneTodoParams alloc] init];
	[params setTodoItemId:todoItemId];
	
	Todoapi * _api = [Todoapi get];
	NSURL *url = [NSURL URLWithString:[NSString stringWithFormat:@"%@/UserService/UndoneTodo.json", [_api BaseURL]]];
	if([_api Verbose]) {
		NSLog(@"Requesting URL: %@", url);
	}
	NSError *error;
	NSDictionary * dict = [Todoapi request:url req:[NSDictionary dictionaryWithObjectsAndKeys: [self dictionary], @"This", [params dictionary], @"Params", nil] error:&error];
	if(error != nil) {
		if([_api Verbose]) {
			NSLog(@"Error: %@", error);
		}
		results = [results init];
		[results setErr:error];
		return results.Err;
	}
	results = [results initWithDictionary: dict];
	
	return results.Err;
}
@end

@implementation AppService : NSObject

- (NSDictionary*) dictionary {
	return [NSDictionary dictionaryWithObjectsAndKeys:nil];
}


// --- GetUserService ---
- (UserService *) GetUserService:(NSString *)email password:(NSString *)password {
	
	UserService *results = [UserService alloc];
	[results setEmail:email];
	[results setPassword:password];
	
	return results;
}
@end



